Script started on 2025-02-19 00:24:50+00:00 [TERM="xterm-256color" TTY="/dev/pts/2" COLUMNS="123" LINES="9"]
[0;32m@soccerzico [0mâžœ [1;34m/workspaces/csci-330-homeworks-soccerzico [0;36m([1;31mmain[0;36m) [0m$ sbcl
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
* (defun swap (list1) 
  
  (if (and (= (length list1) 2) (> (car list1) (cadr list1)))  ;; Swap only if out of order
      (list (cadr list1) (car list1))
      list1))  ;; Otherwise, return as is

(de
SWAP
* fun break-into-sorted-pairs (list1)
 
  (cond
    ((null list1) '())  ;; Base case: empty list
    ((null (cdr list1)) (list (list (car list1))))  ;; Single element case
    (t (cons (swap (list (car list1) (cadr list1)))  ;; Sort the pair before adding
             (break-into-sorted-pairs (cddr list1))))))  ;; Recursively process the rest

(defun
BREAK-INTO-SORTED-PAIRS
*  merge-lists(list1 list2)
  
  (cond
    ((null list1) list2)
    ((null list2) list1) 
    ((< (car list1) (car list2))  
     (cons (car list1) (merge-lists(cdr list1) list2)))
    (t (cons (car list2) (merge-lists list1 (cdr list2))))))

(defun me
MERGE-LISTS
* rge-adjacent (lists)
  
  (cond
    ((null lists) '())  ;; If list is empty, return empty list
    ((null (cdr lists)) lists)  ;; If only one sublist remains, return it
    (t (cons (merge-lists (car lists) (cadr lists))  ;; Merge first two lists
             (merge-adjacent (cddr lists)))))))  ;; Recurse on the rest

(defun merge-sort-passes (list
MERGE-ADJACENT
* 
debugger invoked on a SB-INT:SIMPLE-READER-ERROR in thread
#<THREAD "main thread" RUNNING {9461061}>:
  unmatched close parenthesis

    Stream: #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDIN* {91051F1}>

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [ABORT] Exit debugger, returning to top level.

(SB-IMPL::READ-RIGHT-PAREN #<SYNONYM-STREAM :SYMBOL SB-SYS:*STDIN* {91051F1}> #<unused argument>)
0] s)
  "Repeatedly merges pairs of lists until a single sorted list remains."
  (if (null (cdr lists))  ;; If only one list remains, return it
      (car lists)
      (merge-sort-passes (merge-adjacent lists))))  ;; Keep merging until one list remains

MERGE-SORT-PASSES
0] 
(defun merge-sort (list1)
  
  (merge-sort-passes (break-into-sorted-pairs list1)))  


(merge-sort
MERGE-SORT
0]  '(1 3 4 5 9 1 2 7 6 8 3 4)) 



(1 1 2 3 3 4 4 5 6 7 8 9)
0] (SV B-EXT:EXIT)
[0;32m@soccerzico [0mâžœ [1;34m/workspaces/csci-330-homeworks-soccerzico [0;36m([1;31mmain[0;36m) [0m$ exit
exit

Script done on 2025-02-19 00:25:07+00:00 [COMMAND_EXIT_CODE="0"]
